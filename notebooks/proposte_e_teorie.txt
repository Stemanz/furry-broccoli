
cioè, che roba incredibile che hai fatto.
Ho letto tutto il codice, ne ho capito meno della metà, io sarei riuscito a farne meno di un decimo. Che abisso tra noi.

==============================

Ma veniamo alle cose di codice.

Non potendo contribuire scrivendo grandi modifiche all'enormità che hai già fatto, ti butto lì due idee:

1) usare il multithread per lavorare le immagini.
magari facendo un thread per ciascun canale, e facendone quindi correre in parallelo 3. Ogni thread chiama in contemporanea una funzione di denoise.
in questo modo l'esecuzione dovrebbe velocizzarsi di molto, almeno su macchine adeguate.

2) imitare il deinterlacciamento delle vecchie JPG per ricostruire l'immagine.
non so se ricordi, ma nelle vecchie connessioni a 14.4K le jpg pesavano tantissimo; per darti un'idea del risultato finale senza sprecare banda, 
venivano scaricate a righe alternate.
Quindi, l'idea sarebbe: perché non dividere in thread la ricostruzione?
o canale per canale (3 thread, con R, G e B)
oppure a righe alternate (1 thread per le righe pari, 1 thread per le dispari).

3) [BONUS]
per estensione, magari ci avevi già pensato... se il deinterlacciamento ti piace e funziona, si potrebbe applicare anche alle singole tiles.
Se quelle troppo grandi sono pesanti da elaborare, si potrebbe dividere in thread ogni tiles (righe pari vs. righe dispari), fare il denoise in parallelo e poi ricostruire la tile.


magari ci avevi già pensato... ma ormai sei talmente avanti che il mio solo contributo può essere (forse) teorico.
fammi sapere che ne pensi!
